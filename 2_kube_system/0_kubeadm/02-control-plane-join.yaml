- name: Bootstrap Kubernetes control-plane using kubeadm
  hosts: control
  become: yes
  tasks:
    - name: Copy generate_kubevip_manifests.sh to all nodes
      copy:
        src: ./generate_kubevip_manifests.sh
        dest: /tmp/generate_kubevip_manifests.sh
        mode: "0755"
      when: inventory_hostname != "xcat"

    - name: Generate kube-vip manifest and save it to /etc/kubernetes/manifests/kube-vip.yaml
      shell: |
        mkdir -p /etc/kubernetes/manifests &&
        bash /tmp/generate_kubevip_manifests.sh | tee /etc/kubernetes/manifests/kube-vip.yaml
      when: inventory_hostname != "xcat"

    - name: Clean up generate_kubevip_manifests.sh
      file:
        path: /tmp/generate_kubevip_manifests.sh
        state: absent
      when: inventory_hostname != "xcat"

    - name: Generate join token
      command: kubeadm token create --print-join-command
      register: kubeadm_init
      when: inventory_hostname == "xcat"

    - name: Upload certs and get join cert key
      command: kubeadm init phase upload-certs --upload-certs
      register: kubeadm_upload_certs
      when: inventory_hostname == "xcat"

    - name: Extract token and CA hash from output
      set_fact:
        kubeadm_join_token: "{{ kubeadm_init.stdout | regex_search('kubeadm join .* --token (\\S+)', '\\1') | first }}"
        kubeadm_join_ca_hash: "{{ kubeadm_init.stdout | regex_search('--discovery-token-ca-cert-hash (\\S+)', '\\1') | first }}"
        kubeadm_join_cert_key: "{{ kubeadm_upload_certs.stdout_lines[-1] }}"
      when: inventory_hostname == "xcat"

    - name: Set facts on all nodes
      set_fact:
        kubeadm_join_token: "{{ kubeadm_join_token }}"
        kubeadm_join_ca_hash: "{{ kubeadm_join_ca_hash }}"
        kubeadm_join_cert_key: "{{ kubeadm_join_cert_key }}"
      delegate_to: "{{ item }}"
      delegate_facts: yes
      with_items: "{{ groups['control'] }}"
      when: inventory_hostname == "xcat"

    - name: Copy join config file to all control plane nodes
      template:
        src: ./kubeadm/join-control-plane.yaml.j2
        dest: /root/join-config.yaml
        mode: "0644"
      when: inventory_hostname != "xcat"

    - name: Join control plane nodes to the cluster
      command: kubeadm join --config=/root/join-config.yaml
      when: inventory_hostname != "xcat"
      register: kubeadm_join
      ignore_errors: yes

    - name: Clean up join config file
      file:
        path: /root/join-config.yaml
        state: absent
      when: inventory_hostname != "xcat"
